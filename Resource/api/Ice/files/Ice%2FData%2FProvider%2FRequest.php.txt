<?php
/**
 * Ice data provider implementation request class
 *
 * @link http://www.iceframework.net
 * @copyright Copyright (c) 2014 Ifacesoft | dp <denis.a.shestakov@gmail.com>
 * @license https://github.com/ifacesoft/Ice/blob/master/LICENSE.md
 */

namespace Ice\Data\Provider;

use Ice\Core\Data_Provider;
use Ice\Core\Exception;

/**
 * Class Request
 *
 * Data provider for request data
 *
 * @see Ice\Core\Data_Provider
 *
 * @author dp <denis.a.shestakov@gmail.com>
 *
 * @package Ice
 * @subpackage Data_Provider
 *
 * @version stable_0
 * @since stable_0
 */
class Request extends Data_Provider
{
    const DEFAULT_KEY = 'Ice:Request/http';

//    public static function getInstance($dataProviderKey = null)
//    {
//        if (!$dataProviderKey) {
//            $dataProviderKey = self::getDefaultKey();
//        }
//
//        return parent::getInstance($dataProviderKey);
//    }

    /**
     * Return default data provider key
     *
     * @return string
     */
    protected static function getDefaultKey()
    {
        return self::DEFAULT_KEY;
    }

    /**
     * Get data from data provider by key
     *
     * @param string  $key
     * @return mixed
     */
    public function get($key = null)
    {
        $connection = $this->getConnection();

        if (!$connection) {
            return null;
        }

        if ($key === null) {
            return $connection;
        }

        return isset($connection[$key]) ? $connection[$key] : null;
    }

    /**
     * Set data to data provider
     *
     * @param string $key
     * @param $value
     * @param null $ttl
     * @throws Exception
     * @return mixed setted value
     */
    public function set($key, $value, $ttl = null)
    {
        throw new Exception('Implement set() method.');
    }

    /**
     * Delete from data provider by key
     *
     * @param string $key
     * @param bool $force if true return boolean else deleted value
     * @throws Exception
     * @return mixed|boolean
     */
    public function delete($key, $force = true)
    {
        throw new Exception('Implement delete() method.');
    }

    /**
     * Increment value by key with defined step (default 1)
     *
     * @param $key
     * @param int $step
     * @throws Exception
     * @return mixed new value
     */
    public function inc($key, $step = 1)
    {
        throw new Exception('Implement inc() method.');
    }

    /**
     * Decrement value by key with defined step (default 1)
     *
     * @param $key
     * @param int $step
     * @throws Exception
     * @return mixed new value
     */
    public function dec($key, $step = 1)
    {
        throw new Exception('Implement dec() method.');
    }

    /**
     * Flush all stored data
     */
    public function flushAll()
    {
        throw new Exception('Implement flushAll() method.');
    }

    /**
     * Connect to data provider
     *
     * @param $connection
     * @return boolean
     */
    protected function connect(&$connection)
    {
        if (!isset($_SERVER)) {
            return false;
        }

        $connection = (array)$_REQUEST;
        return true;
    }

    /**
     * Close connection with data provider
     *
     * @param $connection
     * @return boolean
     */
    protected function close(&$connection)
    {
        $connection = null;
        return true;
    }

    /**
     * Return keys by pattern
     *
     * @param string $pattern
     * @return array
     */
    public function getKeys($pattern = null)
    {
        // TODO: Implement getKeys() method.
    }
}
