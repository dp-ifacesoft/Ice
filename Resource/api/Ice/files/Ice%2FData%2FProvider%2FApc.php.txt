<?php
/**
 * Ice data provider implementation apc class
 *
 * @link http://www.iceframework.net
 * @copyright Copyright (c) 2014 Ifacesoft | dp <denis.a.shestakov@gmail.com>
 * @license https://github.com/ifacesoft/Ice/blob/master/LICENSE.md
 */

namespace Ice\Data\Provider;

use Ice\Core\Data_Provider;
use Ice\Core\Exception;

/**
 * Class Apc
 *
 * Data provider for apc cache
 *
 * @see Ice\Core\Data_Provider
 *
 * @author dp <denis.a.shestakov@gmail.com>
 *
 * @package Ice
 * @subpackage Data_Provider
 *
 * @version stable_0
 * @since stable_0
 */
class Apc extends Data_Provider
{
    /**
     * Get data from data provider by key
     *
     * @param string $key
     * @throws Exception
     * @return mixed
     */
    public function get($key = null)
    {
        if ($key === null) {
            throw new Exception("Not implemented get all values from data provider APC");
        }

        return apc_fetch($this->getFullKey($key));
    }

    /**
     * Set data to data provider
     *
     * @param string $key
     * @param $value
     * @param null $ttl
     * @return mixed setted value
     */
    public function set($key, $value, $ttl = null)
    {
        if ($ttl == -1) {
            return $value;
        }

        if ($ttl === null) {
            $options = $this->getOptions(__CLASS__);
            $ttl = $options['ttl'];
        }

        return apc_store($this->getFullKey($key), $value, $ttl) ? $value : null;
    }

    /**
     * Delete from data provider by key
     *
     * @param string $key
     * @param bool $force if true return boolean else deleted value
     * @throws Exception
     * @return mixed|boolean
     */
    public function delete($key, $force = true)
    {
        $key = $this->getFullKey($key);

        if ($force) {
            return apc_delete($key);
        }

        $value = $this->get($key);

        apc_delete($key);

        return $value;
    }

    /**
     * Increment value by key with defined step (default 1)
     *
     * @param $key
     * @param int $step
     * @return mixed new value
     */
    public function inc($key, $step = 1)
    {
        return apc_inc($this->getFullKey($key), $step);
    }

    /**
     * Decrement value by key with defined step (default 1)
     *
     * @param $key
     * @param int $step
     * @return mixed new value
     */
    public function dec($key, $step = 1)
    {
        return apc_dec($this->getFullKey($key), $step);
    }

    /**
     * Flush all stored data
     */
    public function flushAll()
    {
        return apc_clear_cache();
    }

    /**
     * Connect to data provider
     *
     * @param $connection
     * @return boolean
     */
    protected function connect(&$connection)
    {
        return true;
    }

    /**
     * Close connection with data provider
     *
     * @param $connection
     * @return boolean
     */
    protected function close(&$connection)
    {
        return true;
    }

    /**
     * Return keys by pattern
     *
     * @param string $pattern
     * @return array
     */
    public function getKeys($pattern = null)
    {
        // TODO: Implement getKeys() method.
    }
}
