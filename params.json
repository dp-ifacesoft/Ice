{"name":"Ice","tagline":"Open Source PHP Framework","body":"[![Logo](http://iceframework.net/resource/img/logo/ice1.jpg)](http://iceframework.net) [Ice](http://iceframework.net) (iceframework.net) \r\n===\r\n\r\n[![Build Status](https://scrutinizer-ci.com/g/ifacesoft/Ice/badges/build.png?b=master)](https://scrutinizer-ci.com/g/ifacesoft/Ice/build-status/master)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/ifacesoft/Ice/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/ifacesoft/Ice/?branch=master)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/ifacesoft/Ice/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/ifacesoft/Ice/?branch=master)\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/ifacesoft/ice/v/stable.svg)](https://packagist.org/packages/ifacesoft/ice)\r\n[![Total Downloads](https://poser.pugx.org/ifacesoft/ice/downloads.svg)](https://packagist.org/packages/ifacesoft/ice)\r\n[![Latest Unstable Version](https://poser.pugx.org/ifacesoft/ice/v/unstable.svg)](https://packagist.org/packages/ifacesoft/ice)\r\n[![License](https://poser.pugx.org/ifacesoft/ice/license.svg)](https://packagist.org/packages/ifacesoft/ice)\r\n\r\nIce is a general purpose PHP-framework.\r\nYou may fully rely on Ice while developing complex web-applications.\r\nIce key features are the built-in cache support of the main components,\r\nflexible configuration and the ability to easily extend existing functionality.\r\n\r\nAlternative repository on Bitbacket: [Ice](https://bitbucket.org/dp_ifacesoft/ice) (https://bitbucket.org/dp_ifacesoft/ice)\r\n\r\nQuick Start Guide\r\n=================\r\n\r\nCreate a composer.json in the directory workspace/MyProject\r\n-----------------------------------------------------------\r\n\r\n```shell\r\nmkdir -p workspace/MyProject && cd workspace/MyProject && touch composer.json\r\n```\r\n\r\nworkspace - your working directory (logs, caches etc.);\r\n\r\nMyProject - the source code of your project\r\n\r\nan example file:\r\n```json\r\n{\r\n    \"name\": \"vendor/my-project\",\r\n    \"description\": \"My project with Ice\",\r\n    \"type\": \"project\",\r\n    \"require\": {\r\n        \"ifacesoft/ice\": \"1.0.*\"\r\n    },\r\n    \"license\": \"proprietary\",\r\n    \"authors\": [\r\n        {\r\n            \"name\": \"dp\",\r\n            \"email\": \"denis.a.shestakov@gmail.com\"\r\n        }\r\n    ],\r\n    \"minimum-stability\": \"stable\",\r\n    \"config\": {\r\n        \"vendor-dir\": \"../_vendor\"\r\n    },\r\n    \"scripts\": {\r\n        \"post-install-cmd\": [\r\n            \"Ice\\\\App::update\"\r\n        ],\r\n        \"post-update-cmd\": [\r\n            \"Ice\\\\App::update\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\nInstall the project using composer\r\n----------------------------------\r\n\r\n```shell\r\ncurl -sS https://getcomposer.org/installer | php && php composer.phar install --prefer-source\r\n```\r\n\r\nConfigure the web server and /etc/hosts\r\n---------------------------------------\r\n\r\nAfter successful installation, use the generated configuration.\r\n\r\nReady! Your project should be available at http://myproject.local \r\n\r\nThe basics\r\n==========\r\n\r\nRoutes\r\n------\r\n\r\nsample /Config/Ice/Core/Route.php:\r\n\r\n```php\r\n<?php\r\nreturn [\r\n    'mp_page' => [\r\n        'route' => '/page/{$page}',\r\n        'params' => [\r\n            'page' => '(\\d)'\r\n        ],\r\n        'weight' => 10000,\r\n        'request' => [\r\n            'GET' => [\r\n                'Www:Layout_Main' => [\r\n                    'actions' => [\r\n                        ['Ice:Title' => 'title', ['title' => 'Ice - Open Source PHP Framework ']],\r\n                        'Www:Index' => 'main'\r\n                    ]\r\n                ]\r\n            ]\r\n        ]\r\n    ]\r\n]    \r\n```\r\n\r\nImportant parts:\r\n\r\n* 'mp_page' - Route name, (Uses: Route::getInstance('mp_page')->getUrl(20)) returned '/page/20' etc.)\r\n* 'weight' - Priority of matched routes. Greater weight - greater priority.\r\n* 'request' section - Array of available requuest methods (GET, POST etc.)\r\n* 'request/GET' - Only one item (first) contained layout action class as key and params as value\r\n\r\nActions\r\n-------\r\n\r\n```php\r\nnamespace Mp\\Action;\r\nuse Ice\\Core\\Action;\r\nclass Page extends Action\r\n{\r\n    protected static function config()\r\n    {\r\n        return [\r\n            'view' => ['viewRenderClass' => 'Ice:Smarty', 'template' => null, 'layout' => null],\r\n            'actions' => [],\r\n            'input' => [],\r\n            'output' => [],\r\n            'ttl' => -1,\r\n            'access' => [\r\n                'roles' => [],\r\n                'request' => null,\r\n                'env' => null\r\n            ]\r\n        ];\r\n    }\r\n    public function run(array $input)\r\n    {\r\n    }\r\n}\r\n```\r\n\r\n**2 main methods - config and run**\r\n\r\nmethod config - return array:\r\n\r\n* 'view' - Define way of render output data ('viewRenderClass' - render class, 'template' - template for render, layout - template-wrapper of rendered content in emmet style)\r\n* 'actions' - Child actions\r\n* 'input' - Array of input params with their data providers. Also information of validators, defaults end other.\r\n* 'output' - Ð¤dditional sources of output (params and their data providers as well as 'input' section)\r\n* 'ttl' - time stored in cache (now supported only 3600 :) )\r\n* 'access' - Information to checks permissions to run action (support environment - one of 'production', 'test' or 'development' and request - one of 'cli' or 'ajax')\r\n\r\nModels\r\n------\r\n \r\nSelect examples:\r\n\r\n```php\r\n// 1.\r\n$page = Page::getModel(20, ['title', 'desc']); // or Page::getModel(20, '*')\r\n// 2.\r\n$page = Page::create(['title' => 'page 20')->find([id, 'desc']);\r\n// 3.\r\n$page = Page::createQueryBuilder()->eq(['desc' => '20th page'])->getSelectQuery()->getModel();\r\n``` \r\n\r\nInsert examples:\r\n\r\n```php\r\n// 1. \r\nPage::create(['title' => 'page 20', 'desc' => '20th page'])->save();\r\n// 2.\r\nPage::createQueryBuilder()->getInsertQuery(['title' => 'page 20', 'desc' => '20th page'])->getQueryResult();\r\n```  \r\n\r\nUpdate examples:\r\n\r\n```php\r\n// 1. \r\nPage::getModel(20, ['title', 'desc'])->set(['title' => 'another title'])->save();\r\n// 2.\r\nPage::createQueryBuilder()->eq(['id' => 20])->getUpdateQuery(['title' => 'another title'])->getQueryResult();\r\n```   \r\n\r\nUpdate examples:\r\n \r\n```php\r\n// 1. \r\nPage::getModel(20, '/pk')->remove();\r\n// 2.\r\nPage::createQueryBuilder()->getDeleteQuery(20)->getQueryResult();\r\n```   \r\n \r\nDocumentation\r\n=============\r\n\r\nMore info on [iceframework.net](http://iceframework.net) such as:\r\n\r\n* [Guide](http://iceframework.net/guide)\r\n* [Api](http://iceframework.net/resource/api/Ice/1.0/)\r\n\r\nGood luck! \r\n","google":"UA-51954794-1","note":"Don't delete this file! It's used internally to help with page regeneration."}